{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Testing and comparing the effects of scaled and unscaled data on the logistic regression model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Build a small size dataframe with randomly generated data (differing magnitudinal values)\n",
    "\n",
    "Note: Dependent Variable = Categorical\n",
    "\n",
    "Objectives:\n",
    "- Identify Data Scaling Methods that will be tested\n",
    "  - Original Data \n",
    "  - Data Standardized\n",
    "  - MinMax Scaled Data\n",
    "- Visually Compare these Data Scaling Methods\n",
    "\n",
    "Goals:\n",
    "- Analyse any variation in results achieved and document"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Generate Logisitc Regression Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import random\n",
    "#Create empty lists for indepedent variabes\n",
    "X1 = []\n",
    "X2 = []\n",
    "X3 = []\n",
    "X4 = []\n",
    "X5 = []\n",
    "X6 = []\n",
    "\n",
    "##Indpendent variables\n",
    "#Create a for loop to generate data\n",
    "for n in range(0,1000):\n",
    "    number = random.randint(0,50)\n",
    "    X1.append(number)\n",
    "    number = random.randint(0,500)\n",
    "    X2.append(number)\n",
    "    number = random.randint(250,500)\n",
    "    X3.append(number)\n",
    "    number = random.randint(0,1500)\n",
    "    X4.append(number)\n",
    "    number = random.randint(0,100)\n",
    "    X5.append(number)\n",
    "    number = random.randint(2050,5000)\n",
    "    X6.append(number)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Build Dataframe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1000 entries, 0 to 999\n",
      "Data columns (total 6 columns):\n",
      " #   Column  Non-Null Count  Dtype\n",
      "---  ------  --------------  -----\n",
      " 0   X1      1000 non-null   int64\n",
      " 1   X2      1000 non-null   int64\n",
      " 2   X3      1000 non-null   int64\n",
      " 3   X4      1000 non-null   int64\n",
      " 4   X5      1000 non-null   int64\n",
      " 5   X6      1000 non-null   int64\n",
      "dtypes: int64(6)\n",
      "memory usage: 47.0 KB\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>X1</th>\n",
       "      <th>X2</th>\n",
       "      <th>X3</th>\n",
       "      <th>X4</th>\n",
       "      <th>X5</th>\n",
       "      <th>X6</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "      <td>132</td>\n",
       "      <td>274</td>\n",
       "      <td>535</td>\n",
       "      <td>95</td>\n",
       "      <td>2880</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>12</td>\n",
       "      <td>166</td>\n",
       "      <td>493</td>\n",
       "      <td>719</td>\n",
       "      <td>85</td>\n",
       "      <td>3053</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>64</td>\n",
       "      <td>318</td>\n",
       "      <td>1311</td>\n",
       "      <td>72</td>\n",
       "      <td>3536</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>32</td>\n",
       "      <td>440</td>\n",
       "      <td>316</td>\n",
       "      <td>1307</td>\n",
       "      <td>86</td>\n",
       "      <td>2671</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>40</td>\n",
       "      <td>420</td>\n",
       "      <td>343</td>\n",
       "      <td>419</td>\n",
       "      <td>37</td>\n",
       "      <td>3794</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   X1   X2   X3    X4  X5    X6\n",
       "0   2  132  274   535  95  2880\n",
       "1  12  166  493   719  85  3053\n",
       "2   3   64  318  1311  72  3536\n",
       "3  32  440  316  1307  86  2671\n",
       "4  40  420  343   419  37  3794"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "None"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>X1</th>\n",
       "      <th>X2</th>\n",
       "      <th>X3</th>\n",
       "      <th>X4</th>\n",
       "      <th>X5</th>\n",
       "      <th>X6</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1000.000000</td>\n",
       "      <td>1000.000000</td>\n",
       "      <td>1000.000000</td>\n",
       "      <td>1000.000000</td>\n",
       "      <td>1000.000000</td>\n",
       "      <td>1000.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>25.147000</td>\n",
       "      <td>243.558000</td>\n",
       "      <td>373.487000</td>\n",
       "      <td>744.339000</td>\n",
       "      <td>47.865000</td>\n",
       "      <td>3491.510000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>14.959451</td>\n",
       "      <td>144.718458</td>\n",
       "      <td>72.533875</td>\n",
       "      <td>428.893805</td>\n",
       "      <td>29.018388</td>\n",
       "      <td>838.711954</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>250.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2058.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>12.000000</td>\n",
       "      <td>121.000000</td>\n",
       "      <td>308.750000</td>\n",
       "      <td>379.750000</td>\n",
       "      <td>23.000000</td>\n",
       "      <td>2767.250000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>25.000000</td>\n",
       "      <td>238.500000</td>\n",
       "      <td>374.000000</td>\n",
       "      <td>743.000000</td>\n",
       "      <td>47.000000</td>\n",
       "      <td>3465.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>38.000000</td>\n",
       "      <td>363.250000</td>\n",
       "      <td>437.000000</td>\n",
       "      <td>1114.250000</td>\n",
       "      <td>73.000000</td>\n",
       "      <td>4217.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>50.000000</td>\n",
       "      <td>500.000000</td>\n",
       "      <td>500.000000</td>\n",
       "      <td>1500.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>5000.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                X1           X2           X3           X4           X5  \\\n",
       "count  1000.000000  1000.000000  1000.000000  1000.000000  1000.000000   \n",
       "mean     25.147000   243.558000   373.487000   744.339000    47.865000   \n",
       "std      14.959451   144.718458    72.533875   428.893805    29.018388   \n",
       "min       0.000000     0.000000   250.000000     0.000000     0.000000   \n",
       "25%      12.000000   121.000000   308.750000   379.750000    23.000000   \n",
       "50%      25.000000   238.500000   374.000000   743.000000    47.000000   \n",
       "75%      38.000000   363.250000   437.000000  1114.250000    73.000000   \n",
       "max      50.000000   500.000000   500.000000  1500.000000   100.000000   \n",
       "\n",
       "                X6  \n",
       "count  1000.000000  \n",
       "mean   3491.510000  \n",
       "std     838.711954  \n",
       "min    2058.000000  \n",
       "25%    2767.250000  \n",
       "50%    3465.500000  \n",
       "75%    4217.000000  \n",
       "max    5000.000000  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "(1000, 6)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "#Create DataFrame including all above features and generated data\n",
    "df = pd.DataFrame ({'X1':X1,'X2':X2,'X3':X3,'X4':X4,'X5':X5,'X6':X6})\n",
    "#create a copy of original dataframe ...(good practice)\n",
    "original_dataframe = df.copy(deep = True)\n",
    "\n",
    "#Display head of dataframe, dataset information, summary information & dataframe size\n",
    "display(df.head(), df.info(), df.describe(), df.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As we can see from the independent quantitative summary statistics there is alot of variation in the data (observational analysis of the individual features standard deviation). The dependent qualitative feature shows categorical numeric equality charachteristics."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data Pre-Processing Techniques\n",
    "Note:\n",
    "\n",
    "Inputting the training data only.\n",
    "##### Standardizing & MinMax Scaling the Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>X1</th>\n",
       "      <th>X2</th>\n",
       "      <th>X3</th>\n",
       "      <th>X4</th>\n",
       "      <th>X5</th>\n",
       "      <th>X6</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-1.548090</td>\n",
       "      <td>-0.771248</td>\n",
       "      <td>-1.372280</td>\n",
       "      <td>-0.488335</td>\n",
       "      <td>1.625128</td>\n",
       "      <td>-0.729471</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-0.879282</td>\n",
       "      <td>-0.536192</td>\n",
       "      <td>1.648510</td>\n",
       "      <td>-0.059109</td>\n",
       "      <td>1.280346</td>\n",
       "      <td>-0.523099</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-1.481210</td>\n",
       "      <td>-1.241361</td>\n",
       "      <td>-0.765363</td>\n",
       "      <td>1.321876</td>\n",
       "      <td>0.832130</td>\n",
       "      <td>0.053072</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.458334</td>\n",
       "      <td>1.358087</td>\n",
       "      <td>-0.792950</td>\n",
       "      <td>1.312545</td>\n",
       "      <td>1.314824</td>\n",
       "      <td>-0.978787</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.993381</td>\n",
       "      <td>1.219819</td>\n",
       "      <td>-0.420524</td>\n",
       "      <td>-0.758933</td>\n",
       "      <td>-0.374605</td>\n",
       "      <td>0.360841</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         X1        X2        X3        X4        X5        X6\n",
       "0 -1.548090 -0.771248 -1.372280 -0.488335  1.625128 -0.729471\n",
       "1 -0.879282 -0.536192  1.648510 -0.059109  1.280346 -0.523099\n",
       "2 -1.481210 -1.241361 -0.765363  1.321876  0.832130  0.053072\n",
       "3  0.458334  1.358087 -0.792950  1.312545  1.314824 -0.978787\n",
       "4  0.993381  1.219819 -0.420524 -0.758933 -0.374605  0.360841"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>X1</th>\n",
       "      <th>X2</th>\n",
       "      <th>X3</th>\n",
       "      <th>X4</th>\n",
       "      <th>X5</th>\n",
       "      <th>X6</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1.000000e+03</td>\n",
       "      <td>1.000000e+03</td>\n",
       "      <td>1.000000e+03</td>\n",
       "      <td>1.000000e+03</td>\n",
       "      <td>1.000000e+03</td>\n",
       "      <td>1.000000e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>1.340039e-16</td>\n",
       "      <td>2.775558e-17</td>\n",
       "      <td>-2.964295e-16</td>\n",
       "      <td>-1.465494e-16</td>\n",
       "      <td>-4.529710e-17</td>\n",
       "      <td>-2.975398e-16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.000500e+00</td>\n",
       "      <td>1.000500e+00</td>\n",
       "      <td>1.000500e+00</td>\n",
       "      <td>1.000500e+00</td>\n",
       "      <td>1.000500e+00</td>\n",
       "      <td>1.000500e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>-1.681852e+00</td>\n",
       "      <td>-1.683820e+00</td>\n",
       "      <td>-1.703325e+00</td>\n",
       "      <td>-1.736354e+00</td>\n",
       "      <td>-1.650297e+00</td>\n",
       "      <td>-1.710036e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>-8.792822e-01</td>\n",
       "      <td>-8.472957e-01</td>\n",
       "      <td>-8.929537e-01</td>\n",
       "      <td>-8.504936e-01</td>\n",
       "      <td>-8.572992e-01</td>\n",
       "      <td>-8.639705e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>-9.831481e-03</td>\n",
       "      <td>-3.496811e-02</td>\n",
       "      <td>7.076096e-03</td>\n",
       "      <td>-3.123547e-03</td>\n",
       "      <td>-2.982360e-02</td>\n",
       "      <td>-3.102736e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>8.596192e-01</td>\n",
       "      <td>8.274818e-01</td>\n",
       "      <td>8.760704e-01</td>\n",
       "      <td>8.629085e-01</td>\n",
       "      <td>8.666083e-01</td>\n",
       "      <td>8.654378e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.662189e+00</td>\n",
       "      <td>1.772893e+00</td>\n",
       "      <td>1.745065e+00</td>\n",
       "      <td>1.762765e+00</td>\n",
       "      <td>1.797518e+00</td>\n",
       "      <td>1.799479e+00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 X1            X2            X3            X4            X5  \\\n",
       "count  1.000000e+03  1.000000e+03  1.000000e+03  1.000000e+03  1.000000e+03   \n",
       "mean   1.340039e-16  2.775558e-17 -2.964295e-16 -1.465494e-16 -4.529710e-17   \n",
       "std    1.000500e+00  1.000500e+00  1.000500e+00  1.000500e+00  1.000500e+00   \n",
       "min   -1.681852e+00 -1.683820e+00 -1.703325e+00 -1.736354e+00 -1.650297e+00   \n",
       "25%   -8.792822e-01 -8.472957e-01 -8.929537e-01 -8.504936e-01 -8.572992e-01   \n",
       "50%   -9.831481e-03 -3.496811e-02  7.076096e-03 -3.123547e-03 -2.982360e-02   \n",
       "75%    8.596192e-01  8.274818e-01  8.760704e-01  8.629085e-01  8.666083e-01   \n",
       "max    1.662189e+00  1.772893e+00  1.745065e+00  1.762765e+00  1.797518e+00   \n",
       "\n",
       "                 X6  \n",
       "count  1.000000e+03  \n",
       "mean  -2.975398e-16  \n",
       "std    1.000500e+00  \n",
       "min   -1.710036e+00  \n",
       "25%   -8.639705e-01  \n",
       "50%   -3.102736e-02  \n",
       "75%    8.654378e-01  \n",
       "max    1.799479e+00  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>X1</th>\n",
       "      <th>X2</th>\n",
       "      <th>X3</th>\n",
       "      <th>X4</th>\n",
       "      <th>X5</th>\n",
       "      <th>X6</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.04</td>\n",
       "      <td>0.264</td>\n",
       "      <td>0.096</td>\n",
       "      <td>0.356667</td>\n",
       "      <td>0.95</td>\n",
       "      <td>0.279402</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.24</td>\n",
       "      <td>0.332</td>\n",
       "      <td>0.972</td>\n",
       "      <td>0.479333</td>\n",
       "      <td>0.85</td>\n",
       "      <td>0.338205</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.06</td>\n",
       "      <td>0.128</td>\n",
       "      <td>0.272</td>\n",
       "      <td>0.874000</td>\n",
       "      <td>0.72</td>\n",
       "      <td>0.502379</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.64</td>\n",
       "      <td>0.880</td>\n",
       "      <td>0.264</td>\n",
       "      <td>0.871333</td>\n",
       "      <td>0.86</td>\n",
       "      <td>0.208362</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.80</td>\n",
       "      <td>0.840</td>\n",
       "      <td>0.372</td>\n",
       "      <td>0.279333</td>\n",
       "      <td>0.37</td>\n",
       "      <td>0.590075</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     X1     X2     X3        X4    X5        X6\n",
       "0  0.04  0.264  0.096  0.356667  0.95  0.279402\n",
       "1  0.24  0.332  0.972  0.479333  0.85  0.338205\n",
       "2  0.06  0.128  0.272  0.874000  0.72  0.502379\n",
       "3  0.64  0.880  0.264  0.871333  0.86  0.208362\n",
       "4  0.80  0.840  0.372  0.279333  0.37  0.590075"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>X1</th>\n",
       "      <th>X2</th>\n",
       "      <th>X3</th>\n",
       "      <th>X4</th>\n",
       "      <th>X5</th>\n",
       "      <th>X6</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1000.000000</td>\n",
       "      <td>1000.000000</td>\n",
       "      <td>1000.000000</td>\n",
       "      <td>1000.000000</td>\n",
       "      <td>1000.000000</td>\n",
       "      <td>1000.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.502940</td>\n",
       "      <td>0.487116</td>\n",
       "      <td>0.493948</td>\n",
       "      <td>0.496226</td>\n",
       "      <td>0.478650</td>\n",
       "      <td>0.487257</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.299189</td>\n",
       "      <td>0.289437</td>\n",
       "      <td>0.290135</td>\n",
       "      <td>0.285929</td>\n",
       "      <td>0.290184</td>\n",
       "      <td>0.285082</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.240000</td>\n",
       "      <td>0.242000</td>\n",
       "      <td>0.235000</td>\n",
       "      <td>0.253167</td>\n",
       "      <td>0.230000</td>\n",
       "      <td>0.241077</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.477000</td>\n",
       "      <td>0.496000</td>\n",
       "      <td>0.495333</td>\n",
       "      <td>0.470000</td>\n",
       "      <td>0.478416</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>0.760000</td>\n",
       "      <td>0.726500</td>\n",
       "      <td>0.748000</td>\n",
       "      <td>0.742833</td>\n",
       "      <td>0.730000</td>\n",
       "      <td>0.733855</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                X1           X2           X3           X4           X5  \\\n",
       "count  1000.000000  1000.000000  1000.000000  1000.000000  1000.000000   \n",
       "mean      0.502940     0.487116     0.493948     0.496226     0.478650   \n",
       "std       0.299189     0.289437     0.290135     0.285929     0.290184   \n",
       "min       0.000000     0.000000     0.000000     0.000000     0.000000   \n",
       "25%       0.240000     0.242000     0.235000     0.253167     0.230000   \n",
       "50%       0.500000     0.477000     0.496000     0.495333     0.470000   \n",
       "75%       0.760000     0.726500     0.748000     0.742833     0.730000   \n",
       "max       1.000000     1.000000     1.000000     1.000000     1.000000   \n",
       "\n",
       "                X6  \n",
       "count  1000.000000  \n",
       "mean      0.487257  \n",
       "std       0.285082  \n",
       "min       0.000000  \n",
       "25%       0.241077  \n",
       "50%       0.478416  \n",
       "75%       0.733855  \n",
       "max       1.000000  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.preprocessing import normalize, StandardScaler \n",
    "#Initiate Standard Scaler Function\n",
    "scaler = StandardScaler() \n",
    "data_scaled = scaler.fit_transform(df) \n",
    "#Converting the numpy array into a pandas DataFrame \n",
    "data_standardized = pd.DataFrame(data_scaled)\n",
    "# Renaming the columns \n",
    "data_standardized.columns = df.columns \n",
    "\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "#Initiate minxmax Scaler Function\n",
    "scalermm = MinMaxScaler() \n",
    "data_mm = scalermm.fit_transform(df) \n",
    "# Converting the numpy array into a pandas DataFrame \n",
    "data_minmaxscaled = pd.DataFrame(data_mm) \n",
    "# Renaming the columns \n",
    "data_minmaxscaled.columns = df.columns \n",
    "\n",
    "#print head of both\n",
    "display(data_standardized.head(), data_standardized.describe(), data_minmaxscaled.head(), data_minmaxscaled.describe())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x720 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "#Compute scatterplot analysis\n",
    "fig, ax = plt.subplots(3, figsize = (7,10))\n",
    "fig.suptitle('Pre - Processing Comparison Analysis', fontsize = 10)\n",
    "plt.style.use('ggplot')\n",
    "#Scatter-plots\n",
    "ax[0].scatter(df['X1'], df['X3'],color = 'b', alpha = 0.5)\n",
    "ax[1].scatter(data_standardized['X1'], data_standardized['X3'], color = 'r', alpha = 0.5)\n",
    "ax[2].scatter(data_minmaxscaled['X1'], data_minmaxscaled['X3'], color = 'g', alpha = 0.5)\n",
    "#set x labels\n",
    "ax[0].set_xlabel('Original Data')\n",
    "ax[1].set_xlabel('Standardized')\n",
    "ax[2].set_xlabel('Min-Max Data')\n",
    "#Set spacing\n",
    "fig.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It is clear the data shape has not been altered however the scales of the data have been."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Create and Add an indepedent Y variable \n",
    "- Add to original data frame\n",
    "- Add to standardized dataframe\n",
    "- Add to minmax scaled dataframe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "##Generate and Create Data for Dependent variable\n",
    "#Create empty list\n",
    "Y = []\n",
    "#Create a for loop to generate data\n",
    "for n in range(0,1000):\n",
    "    number = random.randint(0,5000)\n",
    "    Y.append(number)\n",
    "\n",
    "#Add indepedent variable to all three dataframes\n",
    "df['Y'] = Y\n",
    "data_standardized['Y'] = Y\n",
    "data_minmaxscaled['Y'] = Y\n",
    "#collpasing data into categories for thee dataframes\n",
    "range = [0,1500, np.inf]\n",
    "category_names = ['Low','High']\n",
    "df['Y'] = pd.cut(df['Y'], bins = range, labels = category_names)\n",
    "data_standardized['Y'] = pd.cut(data_standardized['Y'], bins = range, labels = category_names)\n",
    "data_minmaxscaled['Y'] = pd.cut(data_minmaxscaled['Y'], bins = range, labels = category_names)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Split Data into Train Test Partitions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Train Test Split ... for all 3 dataframes\n",
    "from sklearn.model_selection import train_test_split\n",
    "#Performing train test split on the dataframes\n",
    "train_1, test_1 = train_test_split(df,test_size = 0.2,random_state=31)\n",
    "train_2, test_2 = train_test_split(data_standardized,test_size = 0.2,random_state=31)\n",
    "train_3, test_3 = train_test_split(data_minmaxscaled,test_size = 0.2,random_state=31)\n",
    "\n",
    "#Declare Dependent Variable (Target Variable)... must be categorical (Logistiic Regression)\n",
    "#original data\n",
    "X_train_1 = train_1.drop(['Y'],axis=1)\n",
    "y_train_1 = train_1.filter(['Y'])\n",
    "X_test_1 = test_1.drop(['Y'],axis=1)\n",
    "y_test_1 = test_1.filter(['Y'])\n",
    "#standardized data\n",
    "X_train_2 = train_2.drop(['Y'],axis=1)\n",
    "y_train_2 = train_2.filter(['Y'])\n",
    "X_test_2 = test_2.drop(['Y'],axis=1)\n",
    "y_test_2 = test_2.filter(['Y'])\n",
    "#minmaxscaled data\n",
    "X_train_3 = train_3.drop(['Y'],axis=1)\n",
    "y_train_3 = train_3.filter(['Y'])\n",
    "X_test_3 = test_3.drop(['Y'],axis=1)\n",
    "y_test_3 = test_3.filter(['Y'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "60 Train 40 Test split complete on all three datatframes for logisitc regression preparations. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Build Logistic Regression Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "#importing appropriate packages\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import classification_report\n",
    "# import the metrics class\n",
    "from sklearn import metrics\n",
    "\n",
    "#Developing Function\n",
    "def Binary_Logisitc_Regression(X_train, y_train, X_test, y_test):\n",
    "    #Initialize LR Model\n",
    "    LR = LogisticRegression(max_iter = 200, random_state = 31)\n",
    "    #Training Model on the training Data\n",
    "    LR.fit(X_train,y_train)\n",
    "    #Testing Model on the test Data\n",
    "    Predictions = LR.predict(X_test)\n",
    "    \n",
    "    #Confusion Matrix\n",
    "    confussion_matrix = metrics.confusion_matrix(y_test, Predictions)\n",
    "    print(confussion_matrix)\n",
    "    \n",
    "    #Model Evaluation\n",
    "    target_names = ['class 0', 'class 1']\n",
    "    print(classification_report(y_test, Predictions, target_names=target_names))\n",
    "    #Other\n",
    "    print(\"Accuracy:\",metrics.accuracy_score(y_test, Predictions))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[139   0]\n",
      " [ 61   0]]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "     class 0       0.69      1.00      0.82       139\n",
      "     class 1       0.00      0.00      0.00        61\n",
      "\n",
      "    accuracy                           0.69       200\n",
      "   macro avg       0.35      0.50      0.41       200\n",
      "weighted avg       0.48      0.69      0.57       200\n",
      "\n",
      "Accuracy: 0.695\n",
      "[[139   0]\n",
      " [ 61   0]]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "     class 0       0.69      1.00      0.82       139\n",
      "     class 1       0.00      0.00      0.00        61\n",
      "\n",
      "    accuracy                           0.69       200\n",
      "   macro avg       0.35      0.50      0.41       200\n",
      "weighted avg       0.48      0.69      0.57       200\n",
      "\n",
      "Accuracy: 0.695\n",
      "[[139   0]\n",
      " [ 61   0]]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "     class 0       0.69      1.00      0.82       139\n",
      "     class 1       0.00      0.00      0.00        61\n",
      "\n",
      "    accuracy                           0.69       200\n",
      "   macro avg       0.35      0.50      0.41       200\n",
      "weighted avg       0.48      0.69      0.57       200\n",
      "\n",
      "Accuracy: 0.695\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Dean_\\Anaconda3\\lib\\site-packages\\sklearn\\utils\\validation.py:73: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  return f(**kwargs)\n",
      "C:\\Users\\Dean_\\Anaconda3\\lib\\site-packages\\sklearn\\metrics\\_classification.py:1221: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "C:\\Users\\Dean_\\Anaconda3\\lib\\site-packages\\sklearn\\utils\\validation.py:73: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  return f(**kwargs)\n",
      "C:\\Users\\Dean_\\Anaconda3\\lib\\site-packages\\sklearn\\metrics\\_classification.py:1221: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "C:\\Users\\Dean_\\Anaconda3\\lib\\site-packages\\sklearn\\utils\\validation.py:73: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  return f(**kwargs)\n",
      "C:\\Users\\Dean_\\Anaconda3\\lib\\site-packages\\sklearn\\metrics\\_classification.py:1221: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    }
   ],
   "source": [
    "#Initialize Logisitc Regression Function\n",
    "#Original data\n",
    "Binary_Logisitc_Regression(X_train_1, y_train_1, X_test_1, y_test_1)\n",
    "#standardized data\n",
    "Binary_Logisitc_Regression(X_train_2, y_train_2, X_test_2, y_test_2)\n",
    "#minmaxscaled data\n",
    "Binary_Logisitc_Regression(X_train_3, y_train_3, X_test_3, y_test_3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
