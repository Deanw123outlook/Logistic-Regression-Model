{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Multiple Linear (Only Least Square Model) & Generalized Logistic Regression Comparative Inherent Mechanics and Output Analysis\n",
    "Build a small size dataframe features similar to charachteristics & properties of the Heart Diseases Dataset\n",
    "\n",
    "Note: Dependent Variable = Maximum Heart Rate \n",
    "\n",
    "Objectives:\n",
    "\n",
    "- Discuss inherent statistical measurements and rationale for both models\n",
    "- Build & Compare a linear and logistic regression model\n",
    "- Analyse and differentiate betwee model results and techniques\n",
    "\n",
    "Goals:\n",
    "##### Generate Data\n",
    "Note : The data is generated on information taken from the heart disease dataset. For features names they are identicial and the numerical data genearted below is based on feature min and max values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "#import random package\n",
    "import random\n",
    "\n",
    "#Create empty lists with specific feature names\n",
    "Age = []\n",
    "BMI = []\n",
    "Cholesterol = []\n",
    "Trestbps = []\n",
    "Thalach = []\n",
    "\n",
    "#Create a for loop to generate data\n",
    "for n in range(0,30):\n",
    "    number = random.randint(29,77)\n",
    "    Age.append(number)\n",
    "\n",
    "#Create a for loop to generate data\n",
    "for n in range(0,30):\n",
    "    number = random.randint(17,30.0)\n",
    "    BMI.append(number)\n",
    "    \n",
    "#Create a for loop to generate \n",
    "for n in range(0,30):\n",
    "    number = random.randint(128,275)\n",
    "    Cholesterol.append(number)\n",
    "\n",
    "#Create a for loop to generate data\n",
    "for n in range(0,30):\n",
    "    number = random.randint(94,200)\n",
    "    Trestbps.append(number)\n",
    "\n",
    "#Create a for loop to generate data\n",
    "for n in range(0,30):\n",
    "    number = random.randint(71,202)\n",
    "    Thalach.append(number)\n",
    "\n",
    "#Print all list with generated data\n",
    "#print('Age', Age)\n",
    "#print('BMI', BMI)\n",
    "#print('Cholesterol', Cholesterol)\n",
    "#print('Trestbps', Trestbps)\n",
    "#print('Thalach', Thalach)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Build Dataframe"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note : As we are going to input data into a linear regression model it is important to remember that the dependent (target) variable must contain continuous data.\n",
    "\n",
    "As all independent variables are numerical (no categorical data) present we do not have to perfrom any encoding of the data. If categorical data was present within the independent variables we would perform dummy encoding."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>Body Mass Index</th>\n",
       "      <th>Serum Cholesterol</th>\n",
       "      <th>Resting Blood Pressure</th>\n",
       "      <th>Maximum Heart Rate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>59</td>\n",
       "      <td>21</td>\n",
       "      <td>250</td>\n",
       "      <td>115</td>\n",
       "      <td>120</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>42</td>\n",
       "      <td>25</td>\n",
       "      <td>242</td>\n",
       "      <td>192</td>\n",
       "      <td>174</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>76</td>\n",
       "      <td>21</td>\n",
       "      <td>247</td>\n",
       "      <td>139</td>\n",
       "      <td>167</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>52</td>\n",
       "      <td>26</td>\n",
       "      <td>224</td>\n",
       "      <td>151</td>\n",
       "      <td>175</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>35</td>\n",
       "      <td>21</td>\n",
       "      <td>236</td>\n",
       "      <td>107</td>\n",
       "      <td>196</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Age  Body Mass Index  Serum Cholesterol  Resting Blood Pressure  \\\n",
       "0   59               21                250                     115   \n",
       "1   42               25                242                     192   \n",
       "2   76               21                247                     139   \n",
       "3   52               26                224                     151   \n",
       "4   35               21                236                     107   \n",
       "\n",
       "   Maximum Heart Rate  \n",
       "0                 120  \n",
       "1                 174  \n",
       "2                 167  \n",
       "3                 175  \n",
       "4                 196  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "#Create DataFrame including all above features and generated data\n",
    "data = pd.DataFrame ({'Age': Age, 'Body Mass Index': BMI, 'Serum Cholesterol': Cholesterol, \n",
    "                      'Resting Blood Pressure': Trestbps, 'Maximum Heart Rate': Thalach})\n",
    "#create a copy of original dataframe ...(good practice)\n",
    "original_dataframe = data.copy(deep = True)\n",
    "#create a copy of original datframe ...for (Logistic Regression dataframe)\n",
    "LR_dataframe = data.copy(deep = True)\n",
    "#head of dataframe\n",
    "data.head()\n",
    "\n",
    "#Display head of dataframe, dataset information, summary information & dataframe size\n",
    "#display(data.head(), data.info(), data.describe(), data.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Correlation Analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note : It is important to differentiate between the following statistical measurements covariance and correlation. \n",
    "\n",
    "Covariance refers to the linear association between two variables. A positive value indicates a direct or increasing linear relationship. A negative value indicates a decreasing relationship. Covariance indicates nothing about the strength of the relationship. Covariance has no upper or lower bound its scale is dependent on the two vairables in question.\n",
    "\n",
    "Correlation refers to the linear association between two variables similarly to covariance however correlation provides both the direction and strength of the relationship. Correlation as always between zero and one in its scale is independent of the two variables in question."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>Body Mass Index</th>\n",
       "      <th>Serum Cholesterol</th>\n",
       "      <th>Resting Blood Pressure</th>\n",
       "      <th>Maximum Heart Rate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Age</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.255189</td>\n",
       "      <td>-0.108133</td>\n",
       "      <td>0.069703</td>\n",
       "      <td>-0.117518</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Body Mass Index</th>\n",
       "      <td>0.255189</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.247696</td>\n",
       "      <td>0.218034</td>\n",
       "      <td>-0.180991</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Serum Cholesterol</th>\n",
       "      <td>-0.108133</td>\n",
       "      <td>-0.247696</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.151791</td>\n",
       "      <td>0.396676</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Resting Blood Pressure</th>\n",
       "      <td>0.069703</td>\n",
       "      <td>0.218034</td>\n",
       "      <td>-0.151791</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.061351</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Maximum Heart Rate</th>\n",
       "      <td>-0.117518</td>\n",
       "      <td>-0.180991</td>\n",
       "      <td>0.396676</td>\n",
       "      <td>0.061351</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                             Age  Body Mass Index  Serum Cholesterol  \\\n",
       "Age                     1.000000         0.255189          -0.108133   \n",
       "Body Mass Index         0.255189         1.000000          -0.247696   \n",
       "Serum Cholesterol      -0.108133        -0.247696           1.000000   \n",
       "Resting Blood Pressure  0.069703         0.218034          -0.151791   \n",
       "Maximum Heart Rate     -0.117518        -0.180991           0.396676   \n",
       "\n",
       "                        Resting Blood Pressure  Maximum Heart Rate  \n",
       "Age                                   0.069703           -0.117518  \n",
       "Body Mass Index                       0.218034           -0.180991  \n",
       "Serum Cholesterol                    -0.151791            0.396676  \n",
       "Resting Blood Pressure                1.000000            0.061351  \n",
       "Maximum Heart Rate                    0.061351            1.000000  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Correlation check between all variables\n",
    "correlation = data.corr()\n",
    "correlation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For Linear regression highly correlated independent variables can cause multicolinearity within the algorithim. It is good practice to use a scatterplot to visualize this along with the above check which can help analyse this plausible dilemma.\n",
    "A threshold value should be set in advance of this check and if the threshold is surpasses opt to remove one of the set correlated variables.\n",
    "\n",
    "In contrast for linear regression it is ideal if independent variables are correlated with the dependent (target) variable."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Splitting Data into Train Test Partitions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As the dataframe we are using for experimentation reasons is off small scale we will utilize a 50/50 train test split. The model will train on the labelled training data and test on the unseen labelled testing data.The training data will be increased normally when the dataset is of a large scale for example ( train 80: test 20) dependent on domain and domain problem."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Train Test Split \n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "#Performing train test split on the dataframe\n",
    "train, test = train_test_split(data,test_size = 0.5,random_state=31)\n",
    "#Declare Dependent Variable (Target Variable)\n",
    "X_train = train.drop(['Maximum Heart Rate'],axis=1)\n",
    "y_train = train.filter(['Maximum Heart Rate'])\n",
    "X_test = test.drop(['Maximum Heart Rate'],axis=1)\n",
    "y_test = test.filter(['Maximum Heart Rate'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Linear Regression Model (OLS Model)\n",
    "Key Difference between a Linear & Logisitc Regression Model, is in linear regression the dependent variable will be continuous numeric data in which one or more quantitative variables will be predicting another. For the logistic regression the dependent variable is categorical. The output of the logisitc regression model will be a probability. Remember with probabilites they must be between 0 and 1."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Import statsmodels module\n",
    "import statsmodels.api as sm\n",
    "\n",
    "#Initialize the OLS model\n",
    "##Training the OLS model on segregated training data\n",
    "model = sm.OLS(y_train,X_train)\n",
    "#Testing the OLS model on segragated test data\n",
    "results = model.fit()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Result Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.5288761485794273"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "-0.7396437840856329"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Parameters:  Age                       0.528876\n",
      "Body Mass Index          -0.739644\n",
      "Serum Cholesterol         0.562479\n",
      "Resting Blood Pressure    0.053875\n",
      "dtype: float64\n",
      "Standard errors:  Age                       0.606149\n",
      "Body Mass Index           2.023972\n",
      "Serum Cholesterol         0.173355\n",
      "Resting Blood Pressure    0.295277\n",
      "dtype: float64\n",
      "Predicted values:  [150.1855107  107.48939554 142.93261982  95.02498482 169.79108747\n",
      " 166.03270297 114.83199701 162.53105824 154.95839306 148.356464\n",
      " 119.98817985 171.08290812 162.63080704 146.47876767 149.33972957]\n"
     ]
    }
   ],
   "source": [
    "#Display Intercept\n",
    "display(results.params[0])\n",
    "#Display Intercept\n",
    "display(results.params[1])\n",
    "\n",
    "#Extracting result metrics\n",
    "print('Parameters: ', results.params)\n",
    "print('Standard errors: ', results.bse)\n",
    "print('Predicted values: ', results.predict())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Model Coefficients</th>\n",
       "      <th>Result Standard Errors</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Age</th>\n",
       "      <td>0.528876</td>\n",
       "      <td>0.606149</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Body Mass Index</th>\n",
       "      <td>-0.739644</td>\n",
       "      <td>2.023972</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Serum Cholesterol</th>\n",
       "      <td>0.562479</td>\n",
       "      <td>0.173355</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Resting Blood Pressure</th>\n",
       "      <td>0.053875</td>\n",
       "      <td>0.295277</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                        Model Coefficients  Result Standard Errors\n",
       "Age                               0.528876                0.606149\n",
       "Body Mass Index                  -0.739644                2.023972\n",
       "Serum Cholesterol                 0.562479                0.173355\n",
       "Resting Blood Pressure            0.053875                0.295277"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Models Predicted Values</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>150.185511</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>107.489396</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>142.932620</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>95.024985</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>169.791087</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>166.032703</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>114.831997</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>162.531058</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>154.958393</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>148.356464</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>119.988180</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>171.082908</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>162.630807</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>146.478768</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>149.339730</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Models Predicted Values\n",
       "0                150.185511\n",
       "1                107.489396\n",
       "2                142.932620\n",
       "3                 95.024985\n",
       "4                169.791087\n",
       "5                166.032703\n",
       "6                114.831997\n",
       "7                162.531058\n",
       "8                154.958393\n",
       "9                148.356464\n",
       "10               119.988180\n",
       "11               171.082908\n",
       "12               162.630807\n",
       "13               146.478768\n",
       "14               149.339730"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Create DataFrame including result parameters, standard errors and predicted values\n",
    "Model_Results = pd.DataFrame ({'Model Coefficients': results.params, 'Result Standard Errors': results.bse})\n",
    "#Create DataFrame including the models predicted values\n",
    "Predicted_Values = pd.DataFrame ({'Models Predicted Values': results.predict()})\n",
    "\n",
    "#display \n",
    "display(Model_Results , Predicted_Values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "#Plot the OLS regression line\n",
    "plt.plot(results.predict(),'-o', color = 'r')\n",
    "plt.xlabel('Number of Predicted Values (regression line)')\n",
    "plt.ylabel('Maximum Heart Rates')\n",
    "plt.title('OLS Model Predictions')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                 OLS Regression Results                                \n",
      "=======================================================================================\n",
      "Dep. Variable:     Maximum Heart Rate   R-squared (uncentered):                   0.962\n",
      "Model:                            OLS   Adj. R-squared (uncentered):              0.948\n",
      "Method:                 Least Squares   F-statistic:                              69.61\n",
      "Date:                Thu, 06 May 2021   Prob (F-statistic):                    9.72e-08\n",
      "Time:                        13:36:50   Log-Likelihood:                         -71.797\n",
      "No. Observations:                  15   AIC:                                      151.6\n",
      "Df Residuals:                      11   BIC:                                      154.4\n",
      "Df Model:                           4                                                  \n",
      "Covariance Type:            nonrobust                                                  \n",
      "==========================================================================================\n",
      "                             coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------------------\n",
      "Age                        0.5289      0.606      0.873      0.402      -0.805       1.863\n",
      "Body Mass Index           -0.7396      2.024     -0.365      0.722      -5.194       3.715\n",
      "Serum Cholesterol          0.5625      0.173      3.245      0.008       0.181       0.944\n",
      "Resting Blood Pressure     0.0539      0.295      0.182      0.859      -0.596       0.704\n",
      "==============================================================================\n",
      "Omnibus:                        2.614   Durbin-Watson:                   1.875\n",
      "Prob(Omnibus):                  0.271   Jarque-Bera (JB):                1.105\n",
      "Skew:                          -0.163   Prob(JB):                        0.575\n",
      "Kurtosis:                       1.711   Cond. No.                         65.2\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Dean_\\Anaconda3\\lib\\site-packages\\scipy\\stats\\stats.py:1603: UserWarning: kurtosistest only valid for n>=20 ... continuing anyway, n=15\n",
      "  warnings.warn(\"kurtosistest only valid for n>=20 ... continuing \"\n"
     ]
    }
   ],
   "source": [
    "#Summary Report\n",
    "print(results.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Logistic Regression Model\n",
    "As highlighted above the key difference between linear and logisitc rgeression lies with our dependent variable. For logisitc regression tehe target dependent (target) variable must be categorical.\n",
    "\n",
    "Logisitic regression seeks to:\n",
    "- model the probability of an event occuring depending on the values of the independent variables which can be categorical(encoded) or numerical.\n",
    "- estinate the probaility that an event occurs for a randomly selected observation versus the probaility that the event does not occur.\n",
    "- predict the effect of a series of variables on a binaryresponse variable\n",
    "- classify observations by estimating the probability that an observation is in a particular categiry such as an event occuring not occuring."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Feature Engineering"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will chose the above target variable (Maximum Heart Rate) used for the linear regression model as the target variable. However, we need to perfrom some feature engineering on the variable to bin the continuos data creating a binary (dichotomous) variable for the coming logisitc regression model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>Body Mass Index</th>\n",
       "      <th>Serum Cholesterol</th>\n",
       "      <th>Resting Blood Pressure</th>\n",
       "      <th>Maximum Heart Rate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>59</td>\n",
       "      <td>21</td>\n",
       "      <td>250</td>\n",
       "      <td>115</td>\n",
       "      <td>120</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>42</td>\n",
       "      <td>25</td>\n",
       "      <td>242</td>\n",
       "      <td>192</td>\n",
       "      <td>174</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>76</td>\n",
       "      <td>21</td>\n",
       "      <td>247</td>\n",
       "      <td>139</td>\n",
       "      <td>167</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>52</td>\n",
       "      <td>26</td>\n",
       "      <td>224</td>\n",
       "      <td>151</td>\n",
       "      <td>175</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>35</td>\n",
       "      <td>21</td>\n",
       "      <td>236</td>\n",
       "      <td>107</td>\n",
       "      <td>196</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Age  Body Mass Index  Serum Cholesterol  Resting Blood Pressure  \\\n",
       "0   59               21                250                     115   \n",
       "1   42               25                242                     192   \n",
       "2   76               21                247                     139   \n",
       "3   52               26                224                     151   \n",
       "4   35               21                236                     107   \n",
       "\n",
       "   Maximum Heart Rate  \n",
       "0                 120  \n",
       "1                 174  \n",
       "2                 167  \n",
       "3                 175  \n",
       "4                 196  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>Body Mass Index</th>\n",
       "      <th>Serum Cholesterol</th>\n",
       "      <th>Resting Blood Pressure</th>\n",
       "      <th>Maximum Heart Rate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>30.000000</td>\n",
       "      <td>30.000000</td>\n",
       "      <td>30.000000</td>\n",
       "      <td>30.000000</td>\n",
       "      <td>30.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>54.833333</td>\n",
       "      <td>23.300000</td>\n",
       "      <td>211.766667</td>\n",
       "      <td>152.033333</td>\n",
       "      <td>151.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>14.178866</td>\n",
       "      <td>3.435615</td>\n",
       "      <td>42.421273</td>\n",
       "      <td>28.895153</td>\n",
       "      <td>37.570853</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>30.000000</td>\n",
       "      <td>17.000000</td>\n",
       "      <td>135.000000</td>\n",
       "      <td>98.000000</td>\n",
       "      <td>71.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>43.000000</td>\n",
       "      <td>21.000000</td>\n",
       "      <td>176.250000</td>\n",
       "      <td>129.750000</td>\n",
       "      <td>131.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>55.500000</td>\n",
       "      <td>23.500000</td>\n",
       "      <td>222.000000</td>\n",
       "      <td>150.000000</td>\n",
       "      <td>152.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>67.750000</td>\n",
       "      <td>26.000000</td>\n",
       "      <td>245.000000</td>\n",
       "      <td>180.250000</td>\n",
       "      <td>177.250000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>77.000000</td>\n",
       "      <td>29.000000</td>\n",
       "      <td>269.000000</td>\n",
       "      <td>196.000000</td>\n",
       "      <td>202.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Age  Body Mass Index  Serum Cholesterol  Resting Blood Pressure  \\\n",
       "count  30.000000        30.000000          30.000000               30.000000   \n",
       "mean   54.833333        23.300000         211.766667              152.033333   \n",
       "std    14.178866         3.435615          42.421273               28.895153   \n",
       "min    30.000000        17.000000         135.000000               98.000000   \n",
       "25%    43.000000        21.000000         176.250000              129.750000   \n",
       "50%    55.500000        23.500000         222.000000              150.000000   \n",
       "75%    67.750000        26.000000         245.000000              180.250000   \n",
       "max    77.000000        29.000000         269.000000              196.000000   \n",
       "\n",
       "       Maximum Heart Rate  \n",
       "count           30.000000  \n",
       "mean           151.500000  \n",
       "std             37.570853  \n",
       "min             71.000000  \n",
       "25%            131.500000  \n",
       "50%            152.000000  \n",
       "75%            177.250000  \n",
       "max            202.000000  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Data Head (Unengineered), summary statistics\n",
    "display(LR_dataframe.head(), LR_dataframe.describe())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Looking specifically at the target variable (maximum heart rate) summary statistics this helps determine which data will be collapsed into which category. The midpoint is 138.0. Anything greater than this will proceed into category 1, all other will proceed into category 1 (< = 138.0)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "High Heart Rate    19\n",
      "Low Heart Rate     11\n",
      "Name: Maximum Heart Rate, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "#collpasing data into categories\n",
    "range = [0,138.0, np.inf]\n",
    "category_names = ['Low Heart Rate','High Heart Rate']\n",
    "LR_dataframe['Maximum Heart Rate'] = pd.cut(LR_dataframe['Maximum Heart Rate'], bins = range, labels = category_names)\n",
    "#confirm feature engineering into categories\n",
    "print(LR_dataframe['Maximum Heart Rate'].value_counts())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Splitting Data into Train Test Partitions\n",
    "This process remains the same as seen for the linear regression and in this specific case we will follow the ratio for train test splits used in the libear regression model. The rationale is the same. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Performing train test split on the dataframe\n",
    "train, test = train_test_split(LR_dataframe,test_size = 0.5,random_state=31)\n",
    "#Declare Dependent Variable (Target Variable)\n",
    "X_train = train.drop(['Maximum Heart Rate'],axis=1)\n",
    "y_train = train.filter(['Maximum Heart Rate'])\n",
    "X_test = test.drop(['Maximum Heart Rate'],axis=1)\n",
    "y_test = test.filter(['Maximum Heart Rate'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Logistic Regression Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "#importing appropriate packages\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import classification_report\n",
    "# import the metrics class\n",
    "from sklearn import metrics\n",
    "\n",
    "#Developing Function\n",
    "def Binary_Logisitc_Regression(iter_n):\n",
    "    #Initialize LR Model\n",
    "    LR = LogisticRegression(max_iter = (iter_n),\n",
    "                            random_state = 31)\n",
    "    #Training Model on the training Data\n",
    "    LR.fit(X_train,y_train)\n",
    "    #Testing Model on the test Data\n",
    "    Predictions = LR.predict(X_test)\n",
    "    \n",
    "    #Confusion Matrix\n",
    "    confussion_matrix = metrics.confusion_matrix(y_test, Predictions)\n",
    "    print(confussion_matrix)\n",
    "    \n",
    "    #Model Evaluation\n",
    "    target_names = ['class 0', 'class 1']\n",
    "    print(classification_report(y_test, Predictions, target_names=target_names))\n",
    "    #Other\n",
    "    print(\"Accuracy:\",metrics.accuracy_score(y_test, Predictions))\n",
    "    #print(\"Precision:\",metrics.precision_score(y_test, Predictions))\n",
    "    #print(\"Recall:\",metrics.recall_score(y_test, Predictions))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[4 7]\n",
      " [2 2]]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "     class 0       0.67      0.36      0.47        11\n",
      "     class 1       0.22      0.50      0.31         4\n",
      "\n",
      "    accuracy                           0.40        15\n",
      "   macro avg       0.44      0.43      0.39        15\n",
      "weighted avg       0.55      0.40      0.43        15\n",
      "\n",
      "Accuracy: 0.4\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Dean_\\Anaconda3\\lib\\site-packages\\sklearn\\utils\\validation.py:73: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  return f(**kwargs)\n"
     ]
    }
   ],
   "source": [
    "#Logisitc Regression (Call Function)\n",
    "Binary_Logisitc_Regression(250)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
